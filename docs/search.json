[{"path":"/articles/GIFT_API.html","id":"overview","dir":"Articles","previous_headings":"","what":"1. Overview","title":"Queries in GIFT API","text":"See [Weigelt et al. (2020)]((https://doi.org/10.1111/jbi.13623). R chunk. Just table two columns: queries names arguments needed/possible query","code":"# Dependency between R functions and queries  r_query <- data.frame(   R_function = c(\"GIFT_checklist_raw()\", \"GIFT_checklist_conditional()\",                  \"GIFT_spatial()\", \"GIFT_taxonomy()\", \"GIFT_taxgroup()\",                  \"GIFT_no_overlap()\", \"GIFT_checklist()\", \"GIFT_env()\",                  \"GIFT_shape()\"),   Query = c(\"lists, taxonomy, checklists\", \"lists, taxonomy\", \"\", \"taxonomy\",             \"species, taxonomy\", \"overlap\", \"lists, taxonomy\",             \"geoentities_env_misc, geoentities_env_raster\",             \"only calling geojson\"),   Dependency_GIFT = c(     \"\", \"\", \"GIFT_env()\", \"\", \"\", \"\",     \"GIFT_checklist_conditional(), GIFT_spatial(), GIFT_checklist_raw(),     GIFT_no_overlap()\",     \"\", \"\") )  r_query ##                     R_function                                        Query ## 1         GIFT_checklist_raw()                  lists, taxonomy, checklists ## 2 GIFT_checklist_conditional()                              lists, taxonomy ## 3               GIFT_spatial()                                              ## 4              GIFT_taxonomy()                                     taxonomy ## 5              GIFT_taxgroup()                            species, taxonomy ## 6            GIFT_no_overlap()                                      overlap ## 7             GIFT_checklist()                              lists, taxonomy ## 8                   GIFT_env() geoentities_env_misc, geoentities_env_raster ## 9                 GIFT_shape()                         only calling geojson ##                                                                              Dependency_GIFT ## 1                                                                                            ## 2                                                                                            ## 3                                                                                 GIFT_env() ## 4                                                                                            ## 5                                                                                            ## 6                                                                                            ## 7 GIFT_checklist_conditional(), GIFT_spatial(), GIFT_checklist_raw(),\\n    GIFT_no_overlap() ## 8                                                                                            ## 9"},{"path":"/articles/GIFT_API.html","id":"queries","dir":"Articles","previous_headings":"","what":"2. Queries","title":"Queries in GIFT API","text":"List available queries arguments:  See https://www.gbif.org/developer/summary http://api.gbif.org/","code":"api <- \"\" GIFT_version <- \"latest\"  jsonlite::read_json(paste0(       api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),        \".php?query=checklists&listid=\",       as.numeric(list_ID[i]), \"&taxonid=\", as.numeric(taxonid),       \"&namesmatched=\", as.numeric(namesmatched),       ifelse(floristic_group == \"all\",              \"\", paste0(\"&filter=\", floristic_group))))  jsonlite::read_json(paste0(       api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),       \".php?query=geoentities_env_misc&envvar=\",       paste(miscellaneous, collapse = \",\")),       simplifyVector = TRUE)  jsonlite::read_json(paste0(         api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),         \".php?query=geoentities_env_raster&layername=\", rasterlayer[i],         \"&sumstat=\", sumstat_collapse[[i]]),         simplifyVector = TRUE)  paste0(api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),        \".php?query=lists\")  jsonlite::read_json(paste0(         api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),         \".php?query=names_matched&genus=\", genus, \"&epithet=\", epithet       ), simplifyVector = TRUE)  jsonlite::read_json(paste0(         api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),         \".php?query=names_matched_unique&genus=\", genus, \"&epithet=\", epithet       ), simplifyVector = TRUE)  paste0(api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),        \".php?query=overlap\") jsonlite::read_json(paste0(     api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),     \".php?query=overlap_misc&layer=\", resource), simplifyVector = TRUE)  jsonlite::read_json(paste0(     api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),     \".php?query=references_citavi\"), simplifyVector = TRUE)  jsonlite::read_json(paste0(     api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),     \".php?query=references\"), simplifyVector = TRUE)  jsonlite::read_json(     paste0(api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),            \".php?query=reference_traits\"), simplifyVector = TRUE)  jsonlite::read_json(paste0(     api,\"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),     \".php?query=regions\"), simplifyVector = TRUE)  jsonlite::read_json(paste0(       api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),       \".php?query=species&startat=\", as.integer((i-1)*100000)),        simplifyVector = TRUE)  jsonlite::read_json(paste0(         api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),          \".php?query=species_distr&nameid=\", as.integer(name_IDs[i])),          simplifyVector = TRUE)  jsonlite::read_json(paste0(       api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),       \".php?query=species_num&taxonid=\", tax_group), simplifyVector = TRUE)  paste0(api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),        \".php?query=taxonomy\")  jsonlite::read_json(         paste0(api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),                \".php?query=traits&traitid=\",                trait_IDs[i], \"&biasref=\", as.numeric(bias_ref),                \"&biasderiv=\", as.numeric(bias_deriv),                 \"&startat=\", as.integer((k-1)*10000)),         simplifyVector = TRUE)  jsonlite::read_json(paste0(       api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),       \".php?query=traits_cov&traitid=\",       paste(trait_ID, collapse = \",\"), \"&taxonid=\", tax_group),       simplifyVector = TRUE)  jsonlite::read_json(     paste0(api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),            \".php?query=traits_meta\"), simplifyVector = TRUE)  jsonlite::read_json(       paste0(api, \"index\", ifelse(GIFT_version == \"beta\", \"\", GIFT_version),              \".php?query=traits_raw&traitid=\",              ref_IDs$trait_ID[i], \"&deriv=\", as.numeric(derived),              \"&biasderiv=\", as.numeric(bias_deriv),              \"&refid=\", as.numeric(ref_IDs$ref_ID[i])), simplifyVector = TRUE)  jsonlite::read_json(   \"https://gift.uni-goettingen.de/api/index.php?query=versions\",   simplifyVector = TRUE)    st_read(       paste0(\"http://gift.uni-goettingen.de/geojson/geojson_smaller\",               ifelse(GIFT_version == \"beta\", \"\", GIFT_version), \"/\",              entity_ID[i], \".geojson\"), quiet = TRUE) # Query for trait and chunks  # Default value for end is 10000 # https://gift.uni-goettingen.de/api/extended/index.php?query=traits& # traitid=1.1.1&biasref=1&biasderiv=1&startat=100000&limit=10"},{"path":"/articles/GIFT_API.html","id":"references","dir":"Articles","previous_headings":"","what":"4. References","title":"Queries in GIFT API","text":"Weigelt, P., König, C., & Kreft, H. (2020). GIFT – Global Inventory Floras Traits macroecology biogeography. Journal Biogeography, 47(1), 16–43.","code":""},{"path":[]},{"path":"/articles/GIFT_Internal_functions.html","id":"overview","dir":"Articles","previous_headings":"","what":"1. Overview","title":"GIFT tutorial, advanced users","text":"See [Weigelt et al. (2020)]((https://doi.org/10.1111/jbi.13623).","code":""},{"path":[]},{"path":"/articles/GIFT_Internal_functions.html","id":"trait-extraction","dir":"Articles","previous_headings":"2. Main functions","what":"2.1. Trait extraction","title":"GIFT tutorial, advanced users","text":"retrieve woodiness life information every species using GIFT_traits() function. output function long format data.frame. implies , providing several traits, species rows replicated.","code":"traits_meta <- GIFT_traits_meta() head(traits_meta)  ex_tra <- GIFT_traits(trait_IDs = c(\"1.1.1\", \"1.2.1\"), agreement = 0.66,                       bias_ref = TRUE, bias_deriv = TRUE)  unique(ex_tra$trait_ID) head(ex_tra) # Frequency of trait values for both traits asked table(ex_tra$trait_ID, ex_tra$trait_value) # Number of available species  length(unique(ex_tra$species))  # do same for numerical trait  # original traits ex_tra <- GIFT_traits_raw(trait_IDs = c(\"1.1.1\", \"1.2.1\"), derived = TRUE,                           bias_ref = TRUE, bias_deriv = TRUE)  ex_tra <- GIFT_traits_raw(trait_IDs = c(\"1.2.1\"), derived = TRUE,                           bias_ref = TRUE, bias_deriv = TRUE)  ex_tra <- GIFT_traits_raw(trait_IDs = c(\"1.6.1\", \"1.6.2\"), derived = FALSE,                           bias_ref = FALSE, bias_deriv = FALSE)"},{"path":"/articles/GIFT_Internal_functions.html","id":"lists","dir":"Articles","previous_headings":"2. Main functions","what":"2.3. Lists","title":"GIFT tutorial, advanced users","text":"Retrieve checklists.","code":"ex_list <- GIFT_lists()  head(ex_list)"},{"path":[]},{"path":"/articles/GIFT_Internal_functions.html","id":"environment","dir":"Articles","previous_headings":"3. Metadata","what":"3.1. Environment","title":"GIFT tutorial, advanced users","text":"functions GIFT_env_meta_raster() GIFT_env_meta_misc() allow user retrieve metadata environmental variables.","code":"env_meta <- GIFT_env_meta_raster() head(env_meta)  kableExtra::kbl(env_meta) %>%   kableExtra::scroll_box(width = \"1000px\", height = \"600px\") test <- DB_get_checklists_conditional(   entity_class = c(\"Island\", \"Island/Mainland\",  \"Mainland\",\"Island Group\",                    \"Island Part\"),   native_indicated = TRUE,   natural_indicated = F, end_ref = F, end_list = F,    type_ref = 1:11,   ref_included = c(1,2,3,4),   tax_group = 6,   suit_geo = FALSE, # include checklists not marked as having complete   # angiosperm list   exclude_restricted = T, include_names_unique = F,   return_query_only = TRUE, # saving time   complete_taxonomy = TRUE)  test_withtrees <- DB_get_checklists_conditional(   entity_class = c(\"Island\", \"Island/Mainland\", \"Mainland\", \"Island Group\",                    \"Island Part\"),    native_indicated = TRUE,   natural_indicated = F, end_ref = F, end_list = F,    type_ref = 1:11,   ref_included = c(1,2,3,4, 7, 8),   tax_group = 6,   suit_geo = FALSE,    exclude_restricted = T, include_names_unique = F,   return_query_only = TRUE, # saving time   complete_taxonomy = TRUE)  # differences in entity_ID library(dplyr) n_distinct(test_withtrees$entity_ID) n_distinct(test$entity_ID) n_distinct(test_withtrees[-which(test_withtrees$entity_ID %in% test$entity_ID),                           \"entity_ID\"])   View(test_withtrees[-which(test_withtrees$entity_ID %in% test$entity_ID), ])  # ref_ID 10598 Wallis-Futuna => only trees (other subset) (included 8) # ref_ID 233 => 7 endemic only  dim(test[which(test$ref_ID == 10598), ]) dim(test[which(test$ref_ID == 233), ])  # Classic way to go: # run a first time DB_get_checklist_conditional(), return query only # run DB_get_checklist_conditional() with ref_included 7 and 8, with lists # subset this second output with only the entity_ID present in the first run # this gives the endemic/tree lists for entity that have both taxonomic # and floristic suitable coverage # but does not give the regions that do not have good coverage of # taxonomic/floristic"},{"path":"/articles/GIFT_Internal_functions.html","id":"temporary-gift_shape","dir":"Articles","previous_headings":"3. Metadata > 3.1. Environment","what":"Temporary: GIFT_shape","title":"GIFT tutorial, advanced users","text":"","code":"checklists <- GIFT_checklist(taxon_name = \"Pinaceae\",                              complete_taxon = TRUE,                               floristic_group = c(\"all\", \"native\", \"endemic\",                                                  \"naturalized\")[2],                              complete_floristic = TRUE,                              geo_type = c(\"Island\"),                               suit_geo = TRUE,                              shp = NULL, coordinates = NULL,                              overlap = \"centroid_inside\",                              remove_overlap = FALSE,                              namesmatched = TRUE,                                taxonomic_group = TRUE)  par(mfrow = c(1, 1)) geodata <- GIFT_shape(checklists[[1]]$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID)  data(\"med\")  checklists_centroid_inside <- GIFT_checklist(   taxon_name = \"Pinaceae\",   complete_taxon = TRUE,    floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2],   complete_floristic = TRUE,   geo_type = c(\"All\"),   suit_geo = TRUE,   shp = med, coordinates = NULL, overlap = \"centroid_inside\",   remove_overlap = TRUE,   namesmatched = TRUE,   list_set_only = TRUE)  checklists_extent_intersect <- GIFT_checklist(   taxon_name = \"Pinaceae\",   complete_taxon = TRUE,    floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2],   complete_floristic = TRUE,   geo_type = c(\"All\"),   suit_geo = TRUE,   shp = med, coordinates = NULL, overlap = \"extent_intersect\",   remove_overlap = TRUE,   namesmatched = TRUE,   list_set_only = TRUE)  checklists_shape_intersect <- GIFT_checklist(   taxon_name = \"Pinaceae\",   complete_taxon = TRUE,    floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2],   complete_floristic = TRUE,   geo_type = c(\"All\"),    suit_geo = TRUE,   shp = med, coordinates = NULL, overlap = \"shape_intersect\",   remove_overlap = TRUE,   namesmatched = TRUE,   list_set_only = TRUE)  checklists_shape_inside <- GIFT_checklist(   taxon_name = \"Pinaceae\",   complete_taxon = TRUE,    floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2],   complete_floristic = TRUE,   geo_type = c(\"All\"),   suit_geo = TRUE,   shp = med, coordinates = NULL, overlap = \"shape_inside\",   remove_overlap = TRUE,   namesmatched = TRUE,   list_set_only = TRUE)  par(mfrow=c(2,2), mai=c(0,0,0.5,0)) geodata <- GIFT_shape(checklists_shape_inside[[1]]$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"shape inside\") plot(st_geometry(med), add=TRUE) geodata <- GIFT_shape(checklists_centroid_inside[[1]]$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"centroid inside\") points(x=geodata$point_x, geodata$point_y) plot(st_geometry(med), add=TRUE) geodata <- GIFT_shape(checklists_shape_intersect[[1]]$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"shape intersect\") plot(st_geometry(med), add=TRUE) geodata <- GIFT_shape(checklists_extent_intersect[[1]]$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"extent intersect\") plot(st_geometry(med), add=TRUE)"},{"path":"/articles/GIFT_Internal_functions.html","id":"temporary-gift_shape-1","dir":"Articles","previous_headings":"3. Metadata > 3.1. Environment","what":"Temporary: GIFT_shape","title":"GIFT tutorial, advanced users","text":"Next chunk can removed. Now, custom shape, coordinates, etc => come description GIFT_checklists() Case custom bbox.","code":"ex <- GIFT_spatial(shp = med, overlap = \"centroid_inside\") ex2 <- GIFT_spatial(shp = med, overlap = \"extent_intersect\") ex3 <- GIFT_spatial(shp = med, overlap = \"shape_intersect\") ex4 <- GIFT_spatial(shp = med, overlap = \"shape_inside\")   par(mfrow=c(2,2), mai=c(0,0,0.5,0)) geodata <- GIFT_shape(ex4$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"shape inside\") plot(st_geometry(med), add=TRUE) geodata <- GIFT_shape(ex$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"centroid inside\") points(x=geodata$point_x, geodata$point_y) plot(st_geometry(med), add=TRUE) geodata <- GIFT_shape(ex3$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"shape intersect\") plot(st_geometry(med), add=TRUE) geodata <- GIFT_shape(ex2$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"extent intersect\") plot(st_geometry(med), add=TRUE) custom_point <- cbind(9.92, 51.54) ex5 <- GIFT_spatial(coordinates = custom_point,                     overlap = \"extent_intersect\") ex52 <- GIFT_spatial(coordinates = custom_point,                      overlap = \"centroid_inside\") # does not work but that's ok ex53 <- GIFT_spatial(coordinates = custom_point,                      overlap = \"shape_intersect\") # PROBLEM: empty data frame ex54 <- GIFT_spatial(coordinates = custom_point,                      overlap = \"shape_inside\") # does not work but that is ok  checklists_shape_inside <- GIFT_checklist(   taxon_name = \"Pinaceae\",   complete_taxon = TRUE,    floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2],   complete_floristic = TRUE,   geo_type = c(\"All\"),   suit_geo = TRUE,   shp = NULL, coordinates = cbind(9.9, 51), overlap = \"shape_inside\",   remove_overlap = TRUE,   namesmatched = TRUE,   list_set_only = TRUE)  #' custom_extent <- cbind(c(-13, -18), c(27.5, 29.3)) #' ex6 <- GIFT_spatial(coordinates = custom_extent, #' overlap = \"extent_intersect\") #'  #' custom_polygon <- cbind(c(-18, -16.9, -13, -13, -18, -18), #' c(29.3, 33, 29.3, 27.5, 27.5, 29.3)) #' ex7 <- GIFT_spatial(coordinates = custom_polygon, #' overlap = \"extent_intersect\") custom_extent <- cbind(c(-13, -18), c(27.5, 29.3)) # -18.5 if we want el Hierro  ex6 <- GIFT_spatial(coordinates = custom_extent,                     overlap = \"extent_intersect\") ex62 <- GIFT_spatial(coordinates = custom_extent,                      overlap = \"shape_intersect\") ex63 <- GIFT_spatial(coordinates = custom_extent,                      overlap = \"centroid_inside\") ex64 <- GIFT_spatial(coordinates = custom_extent,                      overlap = \"shape_inside\")  checklists_shape_inside <- GIFT_checklist(   taxon_name = \"Pinaceae\",   complete_taxon = TRUE,    floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2],   complete_floristic = TRUE,   geo_type = c(\"Island\"),    suit_geo = TRUE,   shp = NULL, coordinates = cbind(c(-13, -18.5), c(27.5, 29.5)),   overlap = \"shape_inside\",   remove_overlap = TRUE,   namesmatched = TRUE,   list_set_only = TRUE)  par(mfrow=c(1,1), mai=c(0,0,0.5,0)) geodata <- GIFT_shape(checklists_shape_inside[[1]]$entity_ID) plot(st_geometry(geodata), col=geodata$entity_ID, main= \"shape inside\") # checklists <- GIFT_checklist(taxon_name = \"Spermatophyta\", #   complete_taxon = TRUE,  #   floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2], #   complete_floristic = TRUE, #   geo_type = c(\"Island\"), #   suit_geo = TRUE, #   shp = NULL, coordinates = c(0,10,0,10), overlap = \"centroid_inside\", #   # remove_overlap = TRUE, #   namesmatched = TRUE)  # Check spatial function  head(checklists[[1]]) head(as.data.frame(checklists[[2]])) env_meta2 <- GIFT_env_meta_misc() head(env_meta2)  kableExtra::kbl(env_meta2) %>%   kableExtra::scroll_box(width = \"1000px\", height = \"600px\")   env_meta3 <- GIFT_env_meta_raster() head(env_meta3)  env <- GIFT_env()  env <- GIFT_env(miscellaneous = c(\"area\", \"dist\"),                 rasterlayer = c(\"wc2.0_bio_30s_01\",\"wc2.0_bio_30s_02\"),                 sumstat = c(\"mean\",\"max\"))"},{"path":"/articles/GIFT_Internal_functions.html","id":"species","dir":"Articles","previous_headings":"3. Metadata","what":"3.2. Species","title":"GIFT tutorial, advanced users","text":"functions GIFT_taxonomy() GIFT_species() return data.frame available taxa.","code":"taxo <- GIFT_taxonomy() head(taxo)  kableExtra::kbl(taxo) %>%   kableExtra::scroll_box(width = \"1000px\", height = \"600px\") species <- GIFT_species() head(species)  kableExtra::kbl(species) %>%   kableExtra::scroll_box(width = \"1000px\", height = \"600px\")"},{"path":"/articles/GIFT_Internal_functions.html","id":"traits","dir":"Articles","previous_headings":"3. Metadata","what":"3.3. Traits","title":"GIFT tutorial, advanced users","text":"function GIFT_traits_meta() allows user retrieve metadata available traits.","code":"tmp <- GIFT_traits_meta() head(tmp)  kableExtra::kbl(tmp) %>%   kableExtra::scroll_box(width = \"1000px\", height = \"600px\")"},{"path":"/articles/GIFT_Internal_functions.html","id":"references","dir":"Articles","previous_headings":"3. Metadata","what":"3.4. References","title":"GIFT tutorial, advanced users","text":"function GIFT_references() allows user retrieve metadata references used build GIFT database.","code":"ref <- GIFT_references() head(ref)  kableExtra::kbl(ref) %>%   kableExtra::scroll_box(width = \"1000px\", height = \"600px\")"},{"path":"/articles/GIFT_Internal_functions.html","id":"regions","dir":"Articles","previous_headings":"","what":"4. Regions","title":"GIFT tutorial, advanced users","text":"GIFT_regions()","code":"regions <- GIFT_regions() # germany_checklists <- regions[grep(\"Germany\", regions$geo_entity), ]"},{"path":"/articles/GIFT_Internal_functions.html","id":"gift-versions","dir":"Articles","previous_headings":"","what":"5. GIFT versions","title":"GIFT tutorial, advanced users","text":"GIFT_version()","code":"gift_version <- GIFT_version()"},{"path":"/articles/GIFT_Internal_functions.html","id":"x--references","dir":"Articles","previous_headings":"","what":"X. References","title":"GIFT tutorial, advanced users","text":"Weigelt, P., König, C., & Kreft, H. (2020). GIFT – Global Inventory Floras Traits macroecology biogeography. Journal Biogeography, 47(1), 16–43.","code":""},{"path":[]},{"path":"/articles/GIFT_tutorial.html","id":"shapefile","dir":"Articles","previous_headings":"1. Checklists for a region","what":"1.1. Shapefile","title":"GIFT tutorial","text":"Let’s assume interested floristic knowledge western part Mediterranean basin. purpose, can simply use shapefile region interest feed GIFT_checklist() function. provide shapefile region GIFT R package, can access using data(\"med\") command.  Please note projection used GIFT WGS84, shapefiles provided CRS. can check coordinate reference system sf object using sf::st_crs().","code":"data(\"med\")  world <- ne_coastline(returnclass = \"sf\")  eckertIV <-   \"+proj=eck4 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"  ggplot(world) +   geom_sf(color = \"gray50\") +   geom_sf(data = med, fill = \"darkblue\", color = \"black\", alpha = 0.5,           size = 1) +   labs(title = \"Western Mediterranean basin\") +   lims(x = c(-20, 20), y = c(24, 48)) +   theme_void()"},{"path":"/articles/GIFT_tutorial.html","id":"main-arguments","dir":"Articles","previous_headings":"1. Checklists for a region","what":"1.2. Main arguments","title":"GIFT tutorial","text":"Now shape region interest, let’s call GIFT_checklist(). wrapper function many arguments detail subsection.  First, taxonomic group interest. can interested particular group plants, example Angiosperms. case, set taxon_name argument like taxon_name = \"Angiospermae\". interested particular plant family, let’s say orchids, taxon_name = \"Orchidaceae\".  see options taxon_name argument, can run GIFT_taxonomy() function look taxon_name column output.  Together first argument comes complete_taxon. argument, set default TRUE defines whether incomplete checklists regarding taxon interest retrieved. Figure 1 explaining principle. Figure 1. Complete taxon Figure 1, want retrieve checklists Angiosperms. first region available, region one checklist interest. checklist always retrieved. region B, checklist orchids, subset Angiosperms. complete_taxon set FALSE, checklist won’t retrieved, otherwise yes. Finally, region C, checklist vascular plants one orchids. cases, checklist vascular plants retrieved filtering non-angiosperm species. species Orchids also retrieved cases one available can complete floristic knowledge Angiosperms region.  Following arguments GIFT_checklist() relate floristic statuses plant species. can example interested endemic species, naturalized species. Default value retrieving native species.  Similarly, two arguments needed function. First, floristic_group defines group interest. Second, complete_floristic states whether incomplete regions regarding floristic group chosen retrieved . logic detailed Figure 2 similar complete_taxon argument shown . Figure 2. Complete floristic  next set arguments relate spatial matching desired area GIFT database. main argument regard, providing shapefile set coordinates, overlap argument. argument can get 4 options, options leading different outcome explained Figure 3. Figure 3. GIFT spatial  Figure3, GIFT polygons represented orange either intersect, fall inside outside provided shape file. overlap argument GIFT polygon illustrates situation given GIFT polygon retrieved .  Another important spatial feature provide possibility remove overlapping polygons. Indeed, many regions world, several polygons GIFT database cover . Since may want overlapping polygons. care overlapping polygons, can simply set remove_overlap FALSE. Figure 4. overlap  case want one polygon per region, remove_overlap can set TRUE. case, GIFT_checklist() either retrieve smaller larger polygon. depend values set argument area_th_mainland detailed Figure 4. argument takes value \\(km^2\\). smaller polygon exceeds threshold, retrieved (right column Figure 4). case area smaller polygon threshold, larger overlapping polygon retrieved (middle column Figure 4). similar argument islands, area_th_island, default set 0 \\(km^2\\). way, default, smaller islands always retrieved.  Please also note polygons considered overlapping exceed certain percentage overlap. percentage can modified using overlap_th argument (Figure 5). argument set default 10%. Figure 5. Overlap threshold","code":""},{"path":"/articles/GIFT_tutorial.html","id":"gift_checklist","dir":"Articles","previous_headings":"1. Checklists for a region","what":"1.3. GIFT_checklist()","title":"GIFT tutorial","text":"Now covered main arguments GIFT_checklist(), can retrieve plant checklists Mediterranean region. GIFT_checklist() returns list two elements. First metadata checklists fulfilling different criteria. second element data.frame checklists species composition per checklist.  want retrieve metadata, can set argument list_set_only TRUE.  can now estimation number checklists native Angiosperm species western part Mediterranean basin, well number species. can now apply different values arguments detailed . stricter criteria, can see number checklists retrieved decreases. example, removing overlapping regions: Please note function works shape file can accept set coordinates. example illustrates case want retrieve GIFT checklists intersecting coordinates Göttingen.  cite properly references retrieved, can run function GIFT_references() look column ref_long``. column alsogeo_entity_ref` associates reference name.","code":"ex_meta <- GIFT_checklist(taxon_name = \"Angiospermae\",                           shp = med, overlap = \"centroid_inside\",                           list_set_only = TRUE) medit <- GIFT_checklist(taxon_name = \"Angiospermae\",                         complete_taxon = TRUE,                         floristic_group = \"native\",                         complete_floristic = TRUE,                         geo_type = \"All\",                         shp = med, overlap = \"centroid_inside\",                          remove_overlap = FALSE,                         taxonomic_group = TRUE) # this argument adds two ## ================================================================================ # columns to the checklist: plant family and taxonomic group of each species # Number of references covered length(unique(medit[[2]]$ref_ID)) ## [1] 23 # Number of checklists covered (one reference can have several lists inside) length(unique(medit[[2]]$list_ID)) ## [1] 115 # Number of species length(unique(medit[[2]]$work_species)) ## [1] 12840 medit_no_overlap <- GIFT_checklist(shp = med, overlap = \"centroid_inside\",                                    taxon_name = \"Angiospermae\",                                    remove_overlap = TRUE) ## ================================================================================ # Number of references covered length(unique(medit[[2]]$ref_ID)) ## [1] 23 length(unique(medit_no_overlap[[2]]$ref_ID)) ## [1] 22 custom_point <- cbind(9.9, 51) # coordinates of Göttingen  got <- GIFT_checklist(coordinates = custom_point,                       overlap = \"extent_intersect\",                       taxon_name = \"Angiospermae\",                       remove_overlap = TRUE,                       list_set_only = TRUE)  kable(got[[1]], \"html\") %>%   kable_styling(full_width = FALSE)"},{"path":"/articles/GIFT_tutorial.html","id":"species-richness-map","dir":"Articles","previous_headings":"1. Checklists for a region","what":"1.4. Species richness map","title":"GIFT tutorial","text":"downloaded set checklists, possible map species richness taxonomic group interest. purpose, use combination two functions: GIFT_richness() either retrieves species richness trait coverage per polygon GIFT_shape() retrieves shapefile list GIFT polygons.  next two chunks illustrate Angiosperms World Western part Mediterranean bassin.","code":"gift_shape <- GIFT_shape() # retrieves all shapefiles by default ## ================================================================================ angio_rich <- GIFT_richness(what = \"species_richness\",                             taxon_name = \"Angiospermae\")  rich_map <- dplyr::left_join(gift_shape, angio_rich, by = \"entity_ID\") %>%   dplyr::filter(stats::complete.cases(total))  ggplot(world) +   geom_sf(color = \"gray50\") +   geom_sf(data = rich_map, aes(fill = total + 1)) +   scale_fill_viridis_c(\"Species number\\n(log-transformed)\", trans = \"log\",                        labels = scales::number_format(accuracy = 1)) +   labs(title = \"Angiosperms\", subtitle = \"Projection EckertIV\") +   coord_sf(crs = eckertIV) +   theme_void() med_shape <- gift_shape[which(gift_shape$entity_ID %in%                                  unique(medit[[2]]$entity_ID)), ]  med_rich <- angio_rich[which(angio_rich$entity_ID %in%                                 unique(medit[[2]]$entity_ID)), ]  med_map <- dplyr::left_join(med_shape, med_rich, by = \"entity_ID\") %>%   dplyr::filter(stats::complete.cases(total))  ggplot(world) +   geom_sf(color = \"gray50\") +   geom_sf(data = med, fill = \"darkblue\", color = \"black\", alpha = 0.1,           size = 1) +   geom_sf(data = med_map, aes(fill = total)) +   scale_fill_viridis_c(\"Species number\") +   labs(title = \"Angiosperms in the Western Mediterranean basin\") +   lims(x = c(-20, 20), y = c(24, 48)) +   theme_void()"},{"path":"/articles/GIFT_tutorial.html","id":"distribution-of-species","dir":"Articles","previous_headings":"","what":"2. Distribution of species","title":"GIFT tutorial","text":"GIFT R package also allows retrieving spatial distribution focal plant species.","code":""},{"path":"/articles/GIFT_tutorial.html","id":"available-species","dir":"Articles","previous_headings":"2. Distribution of species","what":"2.1. Available species","title":"GIFT tutorial","text":"know plantspecies available, can first run function GIFT_species(). 364573 species currently available database. number may increase new releases database.","code":"all_sp <- GIFT_species()"},{"path":"/articles/GIFT_tutorial.html","id":"species-names-and-taxonomic-harmonization","dir":"Articles","previous_headings":"2. Distribution of species","what":"2.2. Species names and taxonomic harmonization","title":"GIFT tutorial","text":"Since GIFT collection checklists authors use taxonomic knowledge describe species, step taxonomic harmonization including checklists database. frequent backbone used World Checklists Vascular Plants (WCVP).  original harmonized names stored database can use function GIFT_species_lookup() look differences particular species. example, evergreen oak Quercus ilex. Looking output table, can see original species names identification numbers (name_ID) taxonomic harmonization. species’ names IDs taxonmic harmonization last columns right starting prefix work_.","code":"quercus_lookup <- GIFT_species_lookup(genus = \"Quercus\", epithet = \"ilex\")  kable(quercus_lookup, \"html\") %>%   kable_styling(full_width = FALSE)"},{"path":"/articles/GIFT_tutorial.html","id":"species-distribution","dir":"Articles","previous_headings":"2. Distribution of species","what":"2.3. Species distribution","title":"GIFT tutorial","text":"Now focal species harmonized name, can retrieve distribution using GIFT_species_distribution().  Please note set aggregation argument TRUE order one floristic status per polygon. details, check help page function.  Now know polygons species occur, can map distribution using GIFT shapes retrieved earlier using GIFT_shape().","code":"quercus_distr <- GIFT_species_distribution(   genus = \"Quercus\", epithet = \"ilex\", aggregation = TRUE) quercus_shape <- gift_shape[which(gift_shape$entity_ID %in%                                      unique(quercus_distr$entity_ID)), ]  quercus_map <- dplyr::left_join(   quercus_shape,   quercus_distr[, c(\"entity_ID\", \"native\", \"naturalized\", \"endemic_list\")],   by = \"entity_ID\")  quercus_map <- tidyr::pivot_longer(   quercus_map, cols = c(\"native\", \"naturalized\", \"endemic_list\"),   names_to = \"Status\", values_to = \"status_value\")  quercus_map <- quercus_map[which(quercus_map$status_value == 1), ]  ggplot(world) +   geom_sf(color = \"gray50\") +   geom_sf(data = quercus_map, aes(fill = as.factor(Status))) +   scale_fill_viridis_d(\"Status\") +   labs(title = expression(paste(\"Distribution map of \",                                 italic(\"Quercus ilex\"))),        subtitle = \"Projection EckertIV\") +   coord_sf(crs = eckertIV) +   theme_void()"},{"path":"/articles/GIFT_tutorial.html","id":"trait-data","dir":"Articles","previous_headings":"","what":"3. Trait data","title":"GIFT tutorial","text":"Trait information species level also made available GIFT R package.","code":""},{"path":"/articles/GIFT_tutorial.html","id":"metadata","dir":"Articles","previous_headings":"3. Trait data","what":"3.1. Metadata","title":"GIFT tutorial","text":"many functional traits available GIFT. traits identification number called trait_ID. two functions retrieving trait values, GIFT_traits() GIFT_traits_raw(), rely IDs, first step run function GIFT_traits_meta() know ID wanted trait.  example, let’s say want retrieve maximal vegetative heights plant species. can see ID trait 1.6.2. Now ID, can retrieve growth form values different plant species using GIFT_traits().","code":"trait_meta <- GIFT_traits_meta() trait_meta[which(trait_meta$Trait2 == \"Plant_height_max\"), ] ##    Lvl1   Category Lvl2       Trait1  Lvl3           Trait2 Units    type ## 12    1 Morphology  1.6 Plant height 1.6.2 Plant_height_max     m numeric ##    comment count ## 12    <NA> 71258"},{"path":"/articles/GIFT_tutorial.html","id":"trait-values","dir":"Articles","previous_headings":"3. Trait data","what":"3.2. Trait values","title":"GIFT tutorial","text":"two functions access trait values. First, GIFT_traits_raw() gives trait values given species given trait. trait values can vary.  Second, GIFT_traits() returns aggregated trait value species level. aggregation simply takes mean continuous traits frequent entry categorical traits. However, specific cases, aggregation takes either minimum maximum, like trait chose.  Let’s Three maximal heights Fagus sylvatica available, 30, 35 50 meters, led aggregated value 50 meters.","code":"height <- GIFT_traits(trait_IDs = c(\"1.6.2\"), agreement = 0.66,                       bias_ref = FALSE, bias_deriv = FALSE) ## ================================================================================ height_raw <- GIFT_traits_raw(trait_IDs = c(\"1.6.2\")) ## ================================================================================ # Raw values as.numeric(height_raw[which(height_raw$work_species == \"Fagus sylvatica\"),                       \"trait_value\"]) ## [1] 35 30 50 # Aggregated value as.numeric(height[which(height$work_species == \"Fagus sylvatica\"),                   \"trait_value_1.6.2\"]) ## [1] 50"},{"path":"/articles/GIFT_tutorial.html","id":"trait-coverage","dir":"Articles","previous_headings":"3. Trait data","what":"3.3. Trait coverage","title":"GIFT tutorial","text":"can also retrieve trait coverage information polygons, using function species richness GIFT_richness().  combination shapes loaded previously, can also map trait coverage.","code":"angio_height <- GIFT_richness(what = \"trait_coverage\",                               taxon_name = \"Angiospermae\",                               trait_ID = \"1.6.2\")  angio_height_shape <- gift_shape[which(gift_shape$entity_ID %in%                                           unique(angio_height$entity_ID)), ]  angio_height_map <- dplyr::left_join(   angio_height_shape, angio_height, by = \"entity_ID\")  ggplot(world) +   geom_sf(color = \"gray50\") +   geom_sf(data = angio_height_map, aes(fill = native)) +   scale_fill_viridis_c(\"Coverage (%)\") +   labs(title = \"Coverage for maximal vegetative height of Angiosperms\",        subtitle = \"Projection EckertIV\") +   coord_sf(crs = eckertIV) +   theme_void()"},{"path":"/articles/GIFT_tutorial.html","id":"environmental-variables","dir":"Articles","previous_headings":"","what":"4. Environmental variables","title":"GIFT tutorial","text":"Finally, set summary statistics many environmental variables can retrieved GIFT polygon.","code":""},{"path":"/articles/GIFT_tutorial.html","id":"metadata-1","dir":"Articles","previous_headings":"4. Environmental variables","what":"4.1. Metadata","title":"GIFT tutorial","text":"illustrate retrieve environmental variables, summarized polygon level, subset polygons.  retrieve environmental variables polygons falling western Mediterranean basin, retrieved section 1.  know variables available, can run two metadata functions: GIFT_env_meta_misc() GIFT_env_meta_raster(). respectively give access list miscellaneous variables raster layers available GIFT database.  references cite using environmental variables also available functions (column ref_long outputs).","code":"misc_env <- GIFT_env_meta_misc() raster_env <- GIFT_env_meta_raster()"},{"path":"/articles/GIFT_tutorial.html","id":"environmental-values","dir":"Articles","previous_headings":"4. Environmental variables","what":"4.2. Environmental values","title":"GIFT tutorial","text":"Now, let’s say want retrieve perimeter biome polygon well elevation mean temperature. two raster layers, need define summary statistics, polygons usually bigger raster resolution.  many summary statistics available, can check help page GIFT_env() see . Let’s call mean median elevation maximal value average temperature.","code":"med_env <- GIFT_env(entity_ID = unique(medit[[2]]$entity_ID),                     miscellaneous = c(\"perimeter\", \"biome\"),                     rasterlayer = c(\"mn30_grd\", \"wc2.0_bio_30s_01\"),                     sumstat = list(c(\"mean\", \"med\"), \"max\"))  med_env[1, ] ##     entity_ID geo_entity perimeter                                    biome ## 145       145  El Hierro    126.09 Mediterranean Forests, Woodlands & Scrub ##     mean_mn30_grd med_mn30_grd max_wc2.0_bio_30s_01 ## 145     579.31006          537              21.5625"},{"path":"/articles/GIFT_tutorial.html","id":"map","dir":"Articles","previous_headings":"4. Environmental variables","what":"4.3. Map","title":"GIFT tutorial","text":"Using shapes previously loaded, can also map particular environmental variable GIFT polygons.","code":"world_temp <- GIFT_env(entity_ID = unique(angio_rich$entity_ID),                        rasterlayer = c(\"wc2.0_bio_30s_01\"),                        sumstat = c(\"mean\")) world_temp$entity_ID <- as.numeric(world_temp$entity_ID)  temp_shape <- gift_shape[which(gift_shape$entity_ID %in%                                   unique(angio_rich$entity_ID)), ]  temp_map <- dplyr::left_join(temp_shape, world_temp, by = \"entity_ID\")  temp_map$mean_wc2.0_bio_30s_01 <- as.numeric(temp_map$mean_wc2.0_bio_30s_01)  ggplot(world) +   geom_sf(color = \"gray50\") +   geom_sf(data = temp_map, aes(fill = mean_wc2.0_bio_30s_01)) +   scale_fill_viridis_c(\"Celsius degrees\") +   labs(title = \"Average temperature\",        subtitle = \"Projection EckertIV\") +   coord_sf(crs = eckertIV) +   theme_void()"},{"path":"/articles/GIFT_tutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"5. References","title":"GIFT tutorial","text":"using GIFT database GIFT R package, two resources cite: Weigelt, P., König, C., & Kreft, H. (2020). GIFT – Global Inventory Floras Traits macroecology biogeography. Journal Biogeography, 47(1), 16–43. GIFT R package","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Weigelt. Author, maintainer. Pierre Denelle. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Weigelt P, Denelle P (2022). GIFT: Access Global Inventory Floras Traits (GIFT). R package version 1.0.0, https://github.com/BioGeoMacro/GIFT.","code":"@Manual{,   title = {GIFT: Access to the Global Inventory of Floras and Traits (GIFT)},   author = {Patrick Weigelt and Pierre Denelle},   year = {2022},   note = {R package version 1.0.0},   url = {https://github.com/BioGeoMacro/GIFT}, }"},{"path":"/index.html","id":"gift-","dir":"","previous_headings":"","what":"Access to the Global Inventory of Floras and Traits (GIFT)","title":"Access to the Global Inventory of Floras and Traits (GIFT)","text":"Functions extract data Global Inventory Floras Traits (GIFT)","code":""},{"path":"/index.html","id":"id_1-tutorials","dir":"","previous_headings":"","what":"1. Tutorials","title":"Access to the Global Inventory of Floras and Traits (GIFT)","text":", provide tutorials  - use package’s functions - use BotanizeR Shiny app - set customize Shiny app","code":""},{"path":"/index.html","id":"id_2-functions","dir":"","previous_headings":"","what":"2. Functions","title":"Access to the Global Inventory of Floras and Traits (GIFT)","text":"overview functions data given .","code":""},{"path":"/index.html","id":"id_3-installation","dir":"","previous_headings":"","what":"3. Installation","title":"Access to the Global Inventory of Floras and Traits (GIFT)","text":"","code":"library(\"devtools\") install_github(\"https://github.com/BioGeoMacro/GIFT\")  library(\"GIFT\")"},{"path":[]},{"path":"/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Access to the Global Inventory of Floras and Traits (GIFT)","text":"GIFT depends dplyr, jsonlite, purrr, sf, stats, tidyr utils.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Access to the Global Inventory of Floras and Traits (GIFT)","text":"Weigelt, P., König, C. & Kreft, H. (2020) GIFT – Global Inventory Floras Traits macroecology biogeography. Journal Biogeography, https://doi.org/10.1111/jbi.13623.","code":""},{"path":"/reference/GIFT_checklist.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT checklists — GIFT_checklist","title":"GIFT checklists — GIFT_checklist","text":"Retrieve GIFT checklists fulfill specific criteria.","code":""},{"path":"/reference/GIFT_checklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT checklists — GIFT_checklist","text":"","code":"GIFT_checklist(   taxon_name = \"Tracheophyta\",   complete_taxon = TRUE,   floristic_group = c(\"all\", \"native\", \"endemic\", \"naturalized\")[2],   complete_floristic = TRUE,   geo_type = c(\"All\", \"Mainland\", \"Island\")[1],   suit_geo = FALSE,   shp = NULL,   coordinates = NULL,   overlap = \"centroid_inside\",   remove_overlap = FALSE,   area_th_island = 0,   area_th_mainland = 100,   overlap_th = 0.1,   by_ref_ID = FALSE,   taxonomic_group = TRUE,   namesmatched = FALSE,   list_set_only = FALSE,   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_checklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT checklists — GIFT_checklist","text":"taxon_name Character string corresponding taxonomic group interest. complete_taxon Boolean stating want retrieve checklists contain exhaustive list 'taxon_name' argument well incomplete lists. floristic_group Character among following options: '', 'native', 'endemic', 'naturalized'. complete_floristic Boolean stating want retrieve checklists contain exhaustive list 'floristic_group' argument well incomplete lists. geo_type Character string, either 'Mainland', 'Island' ''. Island gets Island, Island Group & Island Part. Mainland gets Mainland & Island/Mainland. '' gets  . suit_geo Boolean, whether suitable polygons retrieved. shp Shapefile provided user. coordinates Custom set coordinates. format two columns, first one longitudes second latitudes. 4 coordinates given, function assumes four corners bounding box. overlap character string defining criteria use order retrieve checklists. Available options 'centroid_inside', 'extent_intersect', 'shape_intersect' 'shape_inside'. example, 'extent_intersect' means every polygon GIFT extent intersects provided shape/coordinates retrieved. remove_overlap boolean stating whether want retrieve checklists overlap . area_th_island number stating surface smallest overlapping polygon kept. default set 0 square kilometer (meaning default smallest islands conserverd). area_th_mainland two polygons overlap, smallest biggest one can kept. surface smallest polygon exceeds number, smallest polygon kept. Otherwise, keep bigger one. Set default 100 square-kilometers. overlap_th number ranging 0 1, indicating percentage overlap, partially overlapping polygons kept. by_ref_ID logical indicating whether removal overlapping regions shall applied ref_ID . Note regions overlapping regions resource removed even references available regions. taxonomic_group Boolean. set TRUE, two additional columns ('family' 'tax_group') available checklists. namesmatched Boolean. FALSE default, set TRUE want original species name came references well details taxonomic harmonization. list_set_only Boolean. Stating whether want metadata also want retrieve species lists. GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_checklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT checklists — GIFT_checklist","text":"List two data frames: checklist species list ID.","code":""},{"path":"/reference/GIFT_checklist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT checklists — GIFT_checklist","text":"detail data.frame columns: #' 'ref_ID' - Identification number reference. 'type'- type source . 'subset'- information regarding status species available. 'native_indicated'- Whether native status species available source. 'natural_indicated' - Whether naturalized status species available source. 'end_ref' - Whether endemism information available source. 'restricted' - Whether access reference restricted. 'taxon_ID'- Identification number species. 'list_ID'- Identification number list. 'end_list' - Whether endemism information available list. 'entity_ID'- Identification number polygon list. 'geo_entity'- Name location. 'suit_geo'- polygon suitable. 'entity_class'- Type polygon. 'entity_type'- Name location. 'taxon_name'- Name group taxa available. second data frame species, column refers : 'ref_ID' - Identification number reference. 'list_ID'- Identification number list 'work_ID' - Identification number species name, taxonomic  harmonization. 'genus_ID' - Identification number genus, taxonomic  harmonization. 'species' - Species name, taxonomic harmonization. 'questionable' - Whether species occurrence questionable. 'native' - Whether species native. 'quest_native' - Whether native information questionable. 'naturalized' - Whether species naturalized. 'endemic_ref' - Whether species endemic within reference. 'quest_end_ref' - Whether endemic_ref information questionable. 'endemic_list'- Whether species endemic within list. 'quest_end_list' - Whether endemic_list information questionable. 'cons_status' - Conservation status species. 'family' - Family species. 'tax_group' - Taxonomic group species.","code":""},{"path":"/reference/GIFT_checklist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT checklists — GIFT_checklist","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_checklist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT checklists — GIFT_checklist","text":"","code":"if (FALSE) { data(\"med\") ex <- GIFT_checklist(shp = med, overlap = \"centroid_inside\", taxon_name = \"Angiospermae\")  ex2 <- GIFT_checklist(shp = med, overlap = \"centroid_inside\", taxon_name = \"Angiospermae\", list_set_only = TRUE) }"},{"path":"/reference/GIFT_checklist_conditional.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT checklists — GIFT_checklist_conditional","title":"GIFT checklists — GIFT_checklist_conditional","text":"Retrieve GIFT checklists fulfill specific criteria.","code":""},{"path":"/reference/GIFT_checklist_conditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT checklists — GIFT_checklist_conditional","text":"","code":"GIFT_checklist_conditional(   taxon_name = \"Tracheophyta\",   ref_included = c(\"all\", \"native\", \"native and naturalized\",     \"native and historically introduced\", \"endangered\", \"endemic\", \"naturalized\",     \"other subset\")[1:4],   type_ref = c(\"Account\", \"Catalogue\", \"Checklist\", \"Flora\", \"Herbarium collection\",     \"Key\", \"Red list\", \"Report\", \"Species Database\", \"Survey\"),   entity_class = c(\"Island\", \"Island/Mainland\", \"Mainland\", \"Island Group\",     \"Island Part\"),   native_indicated = FALSE,   natural_indicated = FALSE,   end_ref = FALSE,   end_list = FALSE,   suit_geo = FALSE,   complete_taxon = TRUE,   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\",   list_set = NULL,   taxonomy = NULL )"},{"path":"/reference/GIFT_checklist_conditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT checklists — GIFT_checklist_conditional","text":"taxon_name Character string corresponding taxonomic group interest. ref_included Character, options '', 'native', 'native naturalized', 'native historically introduced', 'endangered', 'endemic', 'naturalized', 'subset' type_ref Character, options 'Account', 'Catalogue', 'Checklist', 'Flora', 'Herbarium collection', 'Key', 'Red list', 'Report', 'Species Database', 'Survey' entity_class Character, options 'Island', 'Island/Mainland', 'Mainland', 'Island Group', 'Island Part' native_indicated Boolean, whether lists native status available retrieved. natural_indicated Boolean, whether lists natural status available retrieved. end_ref Boolean, whether lists endemism reference level available retrieved. end_list Boolean, whether lists endemism list level available retrieved. suit_geo Boolean, whether suitable polygons retrieved. complete_taxon Boolean, default TRUE. GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved. list_set default NULL. , vector identification numbers GIFT checklists. taxonomy default NULL. , taxonomy table (see GIFT_taxonomy()).","code":""},{"path":"/reference/GIFT_checklist_conditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT checklists — GIFT_checklist_conditional","text":"data frame 16 columns.","code":""},{"path":"/reference/GIFT_checklist_conditional.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT checklists — GIFT_checklist_conditional","text":"column refers : 'ref_ID' - Identification number reference. 'type'- type source . 'subset'- information regarding status species available. 'native_indicated'- Whether native status species available source. 'natural_indicated' - Whether naturalized status species available source. 'end_ref' - Whether endemism information available source. 'restricted' - Whether access reference restricted. 'taxon_ID'- Identification number species. 'list_ID'- Identification number list. 'end_list' - Whether endemism information available list. 'entity_ID'- Identification number polygon list. 'geo_entity'- Name location. 'suit_geo'- polygon suitable. 'entity_class'- Type polygon. 'entity_type'- Name location. 'taxon_name'- Name group taxa available.","code":""},{"path":"/reference/GIFT_checklist_conditional.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT checklists — GIFT_checklist_conditional","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_checklist_conditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT checklists — GIFT_checklist_conditional","text":"","code":"if (FALSE) { ex <- GIFT_checklist_conditional(taxon_name = \"Embryophyta\",  ref_included = c(\"all\", \"native\", \"native and naturalized\", \"native and historically introduced\", \"endangered\", \"endemic\", \"naturalized\", \"other subset\")[1:4], type_ref = c(\"Account\", \"Catalogue\", \"Checklist\",\"Flora\", \"Herbarium collection\", \"Key\", \"Red list\", \"Report\", \"Species Database\",  \"Survey\"),  entity_class = c(\"Island\", \"Island/Mainland\", \"Mainland\", \"Island Group\",  \"Island Part\"),  native_indicated = FALSE, natural_indicated = FALSE, end_ref = FALSE,  end_list = FALSE, suit_geo = TRUE, complete_taxon = TRUE,  list_set = NULL, taxonomy = NULL)  }"},{"path":"/reference/GIFT_checklist_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT checklists — GIFT_checklist_raw","title":"GIFT checklists — GIFT_checklist_raw","text":"Raw checklist, combine functions","code":""},{"path":"/reference/GIFT_checklist_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT checklists — GIFT_checklist_raw","text":"","code":"GIFT_checklist_raw(   ref_ID = NULL,   list_ID = NULL,   namesmatched = FALSE,   taxon_name = \"Tracheophyta\",   floristic_group = \"all\",   list_set = NULL,   taxonomy = NULL,   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_checklist_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT checklists — GIFT_checklist_raw","text":"ref_ID vector defining IDs references retrieve. `NULL` default. list_ID vector defining IDs lists retrieve. `NULL` default. lists retrieved addition lists  contained references `ref_ID`. namesmatched Boolean. FALSE default, set TRUE want original species name came references well details taxonomic harmonization. taxon_name Character string corresponding taxonomic group interest. floristic_group Character string among options: '', 'native', 'naturalized', 'endemic_list', 'endemic_ref'. list_set NULL default taxonomy NULL default GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_checklist_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT checklists — GIFT_checklist_raw","text":"data frame 15 29 columns (depending namesmatched). data frame contains species checklist given reference/list.","code":""},{"path":"/reference/GIFT_checklist_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT checklists — GIFT_checklist_raw","text":"column refers : 'ref_ID' - Identification number reference. 'list_ID'- Identification number list 'orig_ID'- Identification number species name, unchanged  sources. 'name_ID'- Identification number reference. 'genus'- Genus species. 'species_epithet'- Epithet species. 'subtaxon'- needed, subtaxon species. 'author'- Name author described species. 'matched' - Whether match found using taxonomic backbone. 'epithetscore' - Matching score epithet. 'overallscore' - Matching score overall species name. 'resolved' - Whether species name resolved. 'service' - Service used taxonomic harmonization. 'work_ID' - Identification number species name, taxonomic  harmonization. 'genus_ID' - Identification number genus, taxonomic  harmonization. 'species' - Species name, taxonomic harmonization. 'questionable' - Whether species occurrence questionable. 'native' - Whether species native. 'quest_native' - Whether native information questionable. 'naturalized' - Whether species naturalized. 'endemic_ref' - Whether species endemic within reference. 'quest_end_ref' - Whether endemic_ref information questionable. 'endemic_list'- Whether species endemic within list. 'quest_end_list' - Whether endemic_list information questionable. 'cons_status' - Conservation status species.","code":""},{"path":"/reference/GIFT_checklist_raw.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT checklists — GIFT_checklist_raw","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_checklist_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT checklists — GIFT_checklist_raw","text":"","code":"if (FALSE) { ex <- GIFT_checklist_raw(list_ID = c(1,5)) ex2 <- GIFT_checklist_raw(list_ID = c(1,5), namesmatched = TRUE) }"},{"path":"/reference/GIFT_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Environmental data for GIFT checklists — GIFT_env","title":"Environmental data for GIFT checklists — GIFT_env","text":"Retrieve environmental data associated GIFT checklists. can come rasters shapefiles (miscellaneous)","code":""},{"path":"/reference/GIFT_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environmental data for GIFT checklists — GIFT_env","text":"","code":"GIFT_env(   entity_ID = NULL,   miscellaneous = \"area\",   rasterlayer = NULL,   sumstat = \"mean\",   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environmental data for GIFT checklists — GIFT_env","text":"entity_ID vector defining ID lists retrieve. `NULL` default, case, every list GIFT retrieved. miscellaneous character vector list defining miscellaneous data retrieve. rasterlayer character vector list defining raster data retrieve. sumstat Vector list indicating desired summary statistics  c(\"min\", \"q05\", \"q10\", \"q20\", \"q25\", \"q30\", \"q40\", \"med\", \"q60\", \"q70\",  \"q75\", \"q80\", \"q90\", \"q95\", \"max\", \"mean\", \"sd\", \"modal\", \"unique_n\", \"H\",  \"n\") used aggregate information coming raster layers.  sumstat vector, summary statistics used raster  layers. sumstat list, first element defines summary  statistics first raster layer, second second . GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environmental data for GIFT checklists — GIFT_env","text":"data frame environmental values per polygon (entity_ID).","code":""},{"path":"/reference/GIFT_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Environmental data for GIFT checklists — GIFT_env","text":"columns data.frame following: entity_ID - Identification number polygon geo_entity - Name polygon columns relate environmental variables user asked .","code":""},{"path":"/reference/GIFT_env.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Environmental data for GIFT checklists — GIFT_env","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Environmental data for GIFT checklists — GIFT_env","text":"","code":"if (FALSE) { ex <- GIFT_env(miscellaneous = \"perimeter\") ex <- GIFT_env(entity_ID = c(1,5), miscellaneous = c(\"perimeter\", \"biome\"))  ex <- GIFT_env(entity_ID = c(1,5),                miscellaneous = c(\"perimeter\", \"biome\"),                rasterlayer = c(\"mn30_grd\", \"wc2.0_bio_30s_01\"),                sumstat = \"mean\")  ex <- GIFT_env(entity_ID = c(1,5),                miscellaneous = c(\"perimeter\", \"biome\"),                rasterlayer = c(\"mn30_grd\", \"wc2.0_bio_30s_01\"),                sumstat = c(\"mean\", \"med\"))  ex <- GIFT_env(entity_ID = c(1,5),                miscellaneous = c(\"perimeter\", \"biome\"),                rasterlayer = c(\"mn30_grd\", \"wc2.0_bio_30s_01\"),                sumstat = list(c(\"mean\", \"med\"), \"max\"))  }"},{"path":"/reference/GIFT_env_meta_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","title":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","text":"Retrieve metadata miscellaneous environmental layers accessible GIFT","code":""},{"path":"/reference/GIFT_env_meta_misc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","text":"","code":"GIFT_env_meta_misc(   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_env_meta_misc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","text":"api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_env_meta_misc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","text":"data frame 5 columns.","code":""},{"path":"/reference/GIFT_env_meta_misc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","text":"column refers : 'dataset' - Name source dataset. 'variable'- Name environmental layer. 'description'- Description. 'unit'- Unit. 'ref_long' - Full reference cite using environmental layer.","code":""},{"path":"/reference/GIFT_env_meta_misc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_env_meta_misc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for the environmental miscellaneous variables in GIFT — GIFT_env_meta_misc","text":"","code":"if (FALSE) { ex <- GIFT_env_meta_misc() }"},{"path":"/reference/GIFT_env_meta_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","title":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","text":"Retrieve metadata every environmental raster accessible GIFT","code":""},{"path":"/reference/GIFT_env_meta_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","text":"","code":"GIFT_env_meta_raster(   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_env_meta_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","text":"api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_env_meta_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","text":"data frame 10 columns.","code":""},{"path":"/reference/GIFT_env_meta_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","text":"column refers : 'dataset' - Name source dataset. 'layer_name'- Name environmental layer. 'layer'- Full name. 'description'- Description. 'unit'- Unit. 'coord_system'- Coordinate system. 'resolution'- Resolution. 'extent'- Extent. 'version' - Version source. 'ref_long' - Full reference cite using environmental layer.","code":""},{"path":"/reference/GIFT_env_meta_raster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_env_meta_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for the environmental rasters in GIFT — GIFT_env_meta_raster","text":"","code":"if (FALSE) { ex <- GIFT_env_meta_raster() }"},{"path":"/reference/GIFT_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"References available in GIFT — GIFT_lists","title":"References available in GIFT — GIFT_lists","text":"Retrieves metadata reference within GIFT.","code":""},{"path":"/reference/GIFT_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"References available in GIFT — GIFT_lists","text":"","code":"GIFT_lists(   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"References available in GIFT — GIFT_lists","text":"api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"References available in GIFT — GIFT_lists","text":"data frame 15 columns.","code":""},{"path":"/reference/GIFT_lists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"References available in GIFT — GIFT_lists","text":"Column 'ref_ID' indicates identification number reference. Columns 'type' 'subset' indicate information can found reference. Similarly, '', '' '' indicate respectively whether native, naturalized endemic species stated reference. 'restricted' refers availability reference, 'taxon_ID' taxonomic group available reference. 'list_ID' identification number checklist within reference, 'entity_ID' associated polygon. 'geo_entity' associates name identification number. 'suit_geo' indicates whether checklist suitable use, 'entity_class' 'entity_unit' give additional details polygon.","code":""},{"path":"/reference/GIFT_lists.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"References available in GIFT — GIFT_lists","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"References available in GIFT — GIFT_lists","text":"","code":"if (FALSE) { ex <- GIFT_lists() }"},{"path":"/reference/GIFT_no_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT_no_overlap — GIFT_no_overlap","title":"GIFT_no_overlap — GIFT_no_overlap","text":"Identify overlapping regions set GIFT regions choose  non-overlapping regions based size overlap criteria","code":""},{"path":"/reference/GIFT_no_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT_no_overlap — GIFT_no_overlap","text":"","code":"GIFT_no_overlap(   entity_IDs = NULL,   area_th_island = 0,   area_th_mainland = 100,   overlap_th = 0.1,   geoentities_overlap = NULL,   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_no_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT_no_overlap — GIFT_no_overlap","text":"entity_IDs vector IDs regions want check overlap area_th_island number stating surface smallest overlapping polygon kept. default set 0 square kilometer (meaning default smallest islands conserved). area_th_mainland two polygons overlap, smallest biggest one can kept. surface smallest polygon exceeds number, smallest polygon kept. Otherwise, keep bigger one. Set default 100 square-kilometers. overlap_th number ranging 0 1, indicating percentage overlap, partially overlapping polygons kept. geoentities_overlap table coming GIFT indicating overlap km^2 pairs polygons. api Character string defining API data retrieved. GIFT_version Character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_no_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT_no_overlap — GIFT_no_overlap","text":"vector entity_IDs (identification numbers polygons) non-overlapping.","code":""},{"path":"/reference/GIFT_no_overlap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT_no_overlap — GIFT_no_overlap","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":[]},{"path":"/reference/GIFT_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","title":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","text":"Calculate spatial overlap GIFT polygons shapefiles coming resources","code":""},{"path":"/reference/GIFT_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","text":"","code":"GIFT_overlap(   resource = \"glonaf\",   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","text":"resource character string indicating resource spatial overlap calculated. Available options 'glonaf' 'gmba'. glonaf stands Global Naturalized Alien Flora gmba Global Mountain Biodiversity Assessment. GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","text":"data frame spatial overlap.","code":""},{"path":"/reference/GIFT_overlap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","text":"columns data.frame following: entity_ID - Identification number GIFT polygon glonaf_ID (gmba_ID) - Identification number polygon resource. overlap12 - Spatial overlap percentage GIFT polygon external polygon. overlap21 - way around.","code":""},{"path":"/reference/GIFT_overlap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial overlap between GIFT polygons and external polygons — GIFT_overlap","text":"","code":"if (FALSE) { glonaf <- GIFT_overlap(resource = \"glonaf\") gmba <- GIFT_overlap(resource = \"gmba\") }"},{"path":"/reference/GIFT_references.html","id":null,"dir":"Reference","previous_headings":"","what":"References available in GIFT — GIFT_references","title":"References available in GIFT — GIFT_references","text":"Retrieve metadata every reference accessible GIFT","code":""},{"path":"/reference/GIFT_references.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"References available in GIFT — GIFT_references","text":"","code":"GIFT_references(   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_references.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"References available in GIFT — GIFT_references","text":"api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_references.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"References available in GIFT — GIFT_references","text":"data frame 14 columns.","code":""},{"path":"/reference/GIFT_references.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"References available in GIFT — GIFT_references","text":"column refers : 'ref_ID' - Identification number reference. 'ref_long'- Full reference reference. 'geo_entity_ref'- Name location. 'type'- type source . 'subset'- information regarding status species available. 'taxon_ID'- Identification number group taxa available. 'taxon_name'- Name group taxa available. 'checklist'- source checklist. 'native_indicated'- Whether native status species available source. 'natural_indicated' - Whether naturalized status species available source. 'end_ref' - Whether endemism information available source. 'traits' - Whether trait information available source. 'restricted' - Whether access reference restricted. 'proc_date' - source processed.","code":""},{"path":"/reference/GIFT_references.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"References available in GIFT — GIFT_references","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_references.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"References available in GIFT — GIFT_references","text":"","code":"if (FALSE) { ex <- GIFT_references() }"},{"path":"/reference/GIFT_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT regions — GIFT_regions","title":"GIFT regions — GIFT_regions","text":"Retrieves miscellaneous information GIFT regions.","code":""},{"path":"/reference/GIFT_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT regions — GIFT_regions","text":"","code":"GIFT_regions(   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT regions — GIFT_regions","text":"api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT regions — GIFT_regions","text":"data frame 7 columns.","code":""},{"path":"/reference/GIFT_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT regions — GIFT_regions","text":"detail column: entity_ID - Identification number GIFT polygons geo_entity - Name GIFT polygons suit_geo - Whether polygon suitable entity_class - Class polygon entity_type - Type polygon TDWG_lvl3_ID - Whether polygon TDWG region (see https://www.tdwg.org/) country - Whether polygon country","code":""},{"path":"/reference/GIFT_regions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT regions — GIFT_regions","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT regions — GIFT_regions","text":"","code":"if (FALSE) { ex <- GIFT_regions() }"},{"path":"/reference/GIFT_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Species richness and trait coverage in GIFT — GIFT_richness","title":"Species richness and trait coverage in GIFT — GIFT_richness","text":"Retrieve either species richness per polygon trait coverage given trait.","code":""},{"path":"/reference/GIFT_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species richness and trait coverage in GIFT — GIFT_richness","text":"","code":"GIFT_richness(   what = \"species_richness\",   taxon_name = \"Embryophyta\",   trait_ID = \"1.1.1\",   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species richness and trait coverage in GIFT — GIFT_richness","text":"Species richness trait coverage. taxon_name Name taxonomic group want retrieve. trait_ID Identification number trait want retrieve. GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_richness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Species richness and trait coverage in GIFT — GIFT_richness","text":"data frame either species richness trait coverage per GIFT polygon.","code":""},{"path":"/reference/GIFT_richness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Species richness and trait coverage in GIFT — GIFT_richness","text":"output 5 columns: entity_ID - Identification number GIFT polygons total - total species richness trait coverage native - number native species trait coverage native species naturalized - number naturalized species trait coverage naturalized species endemic_min - number endemic species trait coverage endemic species","code":""},{"path":"/reference/GIFT_richness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Species richness and trait coverage in GIFT — GIFT_richness","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_richness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species richness and trait coverage in GIFT — GIFT_richness","text":"","code":"if (FALSE) { ex <- GIFT_richness(what = \"species_richness\", taxon_name = \"Angiospermae\") ex2 <- GIFT_richness(what = \"trait_coverage\", taxon_name = \"Angiospermae\", trait_ID = \"1.2.1\")  }"},{"path":"/reference/GIFT_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT shape — GIFT_shape","title":"GIFT shape — GIFT_shape","text":"Get shapefile GIFT regions selected entities","code":""},{"path":"/reference/GIFT_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT shape — GIFT_shape","text":"","code":"GIFT_shape(   entity_ID = NULL,   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT shape — GIFT_shape","text":"entity_ID vector defining IDs regions. api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT shape — GIFT_shape","text":"spatial data.frame 21 columns.","code":""},{"path":"/reference/GIFT_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT shape — GIFT_shape","text":"detail column: entity_ID - Identification number polygon geo_entity - Name polygon point_x - Longitude centroid polygon point_y - Latitude centroid polygon area - Area km2 polygon x_min - Minimum longitude polygon x_max - Maximum longitude polygon y_min - Minimum latitude polygon y_max - Maximum latitude polygon entity_class - Class polygon entity_type - Type entity polygon_source - Source polygon geometry - Geometry column sf","code":""},{"path":"/reference/GIFT_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT shape — GIFT_shape","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT shape — GIFT_shape","text":"","code":"if (FALSE) { ex <- GIFT_shape(entity_ID = c(677, 200)) plot(st_geometry(ex), col = ex$entity_ID) }"},{"path":"/reference/GIFT_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Environmental data for GIFT checklists — GIFT_spatial","title":"Environmental data for GIFT checklists — GIFT_spatial","text":"Retrieve environmental data associated GIFT checklists. can come rasters shapefiles (miscellaneous)","code":""},{"path":"/reference/GIFT_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environmental data for GIFT checklists — GIFT_spatial","text":"","code":"GIFT_spatial(   shp = NULL,   coordinates = NULL,   overlap = \"centroid_inside\",   entity_ID = NULL,   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environmental data for GIFT checklists — GIFT_spatial","text":"shp Shapefile provided user. coordinates Custom set coordinates. format two columns, first one longitudes second latitudes. 4 coordinates given, function assumes four corners bounding box. overlap character string defining criteria use order retrieve checklists. Available options 'centroid_inside', 'extent_intersect', 'shape_intersect' 'shape_inside'. example, 'extent_intersect' means every polygon GIFT extent intersects provided shape/coordinates retrieved. entity_ID List entity_ID retrieve. GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environmental data for GIFT checklists — GIFT_spatial","text":"data frame 3 columns: entity_ID identification number polygon, 'geo_entity_ref' name, 'coverage' indicates percentage overlap provided shape different polygons GIFT.","code":""},{"path":"/reference/GIFT_spatial.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Environmental data for GIFT checklists — GIFT_spatial","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Environmental data for GIFT checklists — GIFT_spatial","text":"","code":"if (FALSE) { data(\"med\") ex <- GIFT_spatial(shp = med, overlap = \"centroid_inside\") ex2 <- GIFT_spatial(shp = med, overlap = \"extent_intersect\") ex3 <- GIFT_spatial(shp = med, overlap = \"shape_intersect\") ex4 <- GIFT_spatial(shp = med, overlap = \"shape_inside\")  custom_point <- cbind(9.9, 51) ex5 <- GIFT_spatial(coordinates = custom_point, overlap = \"extent_intersect\")  custom_extent <- cbind(c(-13, -18), c(27.5, 29.3)) ex6 <- GIFT_spatial(coordinates = custom_extent, overlap = \"extent_intersect\")  custom_polygon <- cbind(c(-18, -16.9, -13, -13, -18, -18), c(29.3, 33, 29.3, 27.5, 27.5, 29.3)) ex7 <- GIFT_spatial(coordinates = custom_polygon, overlap = \"extent_intersect\")  custom_linestring <- rbind(c(9.9, 51), c(2.35, 48.9)) custom_linestring <- sf::st_as_sf(as.data.frame(custom_linestring), coords = c(\"V1\", \"V2\")) custom_linestring <- dplyr::summarise(custom_linestring, geometry = sf::st_combine(geometry)) sf::st_crs(custom_linestring) <- sf::st_crs(med) ex8 <- GIFT_spatial(shp = custom_linestring, overlap = \"extent_intersect\")  }"},{"path":"/reference/GIFT_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Species list in GIFT — GIFT_species","title":"Species list in GIFT — GIFT_species","text":"Retrieve whole set plant species available GIFT","code":""},{"path":"/reference/GIFT_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species list in GIFT — GIFT_species","text":"","code":"GIFT_species(   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species list in GIFT — GIFT_species","text":"api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Species list in GIFT — GIFT_species","text":"data frame 5 columns.","code":""},{"path":"/reference/GIFT_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Species list in GIFT — GIFT_species","text":"column refers : 'work_ID' - Identification number species 'genus_ID' - Identification number genus 'work_genus' - Genus name taxonomic harmonization 'work_species'- Species name taxonomic harmonization 'work_author'- Author described species (taxonomic  harmonization)","code":""},{"path":"/reference/GIFT_species.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Species list in GIFT — GIFT_species","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species list in GIFT — GIFT_species","text":"","code":"if (FALSE) { ex <- GIFT_species() }"},{"path":"/reference/GIFT_species_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT species distribution — GIFT_species_distribution","title":"GIFT species distribution — GIFT_species_distribution","text":"Retrieve distribution one species GIFT checklits.","code":""},{"path":"/reference/GIFT_species_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT species distribution — GIFT_species_distribution","text":"","code":"GIFT_species_distribution(   genus = \"Fagus\",   epithet = \"sylvatica\",   namesmatched = FALSE,   remove_overlap = FALSE,   area_th_island = 0,   area_th_mainland = 100,   overlap_th = 0.1,   by_ref_ID = FALSE,   aggregation = FALSE,   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_species_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT species distribution — GIFT_species_distribution","text":"genus Character string corresponding genus species  interest. epithet Character string corresponding epithet species  interest. namesmatched Boolean. FALSE default, set TRUE want  look species standardized species names also  original species names came original resources. remove_overlap boolean stating whether want retrieve checklists overlap . area_th_island number stating surface smallest overlapping polygon kept. default set 0 square kilometer (meaning default smallest islands conserved). area_th_mainland two polygons overlap, smallest biggest one can kept. surface smallest polygon exceeds number, smallest polygon kept. Otherwise, keep bigger one. Set default 100 square-kilometers. overlap_th number ranging 0 1, indicating percentage overlap, partially overlapping polygons kept. by_ref_ID logical indicating whether removal overlapping regions shall applied ref_ID . Note regions overlapping regions resource removed even references available regions. aggregation Boolean stating whether want aggregate simpler way floristic status species per entity_ID. example, two lists associated entity_ID describe species native non-native. case, aggregation consider species native. Reverse naturalized alien. GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_species_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT species distribution — GIFT_species_distribution","text":"List two data frames: checklist species list ID.","code":""},{"path":"/reference/GIFT_species_distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT species distribution — GIFT_species_distribution","text":"detail data.frame columns: aggregation = TRUE, 3 extra columns telling whether conflict floristic statuses species across different sources. columns relating floristic statuses one value.","code":""},{"path":"/reference/GIFT_species_distribution.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT species distribution — GIFT_species_distribution","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_species_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT species distribution — GIFT_species_distribution","text":"","code":"if (FALSE) { ex <- GIFT_species_distribution() }"},{"path":"/reference/GIFT_species_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Species list in GIFT — GIFT_species_lookup","title":"Species list in GIFT — GIFT_species_lookup","text":"Retrieve name matching information one taxonomic name. results  returned, name either found unstandardized  taxonomically standardized names.","code":""},{"path":"/reference/GIFT_species_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species list in GIFT — GIFT_species_lookup","text":"","code":"GIFT_species_lookup(   genus = \"\",   epithet = \"\",   namesmatched = FALSE,   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_species_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species list in GIFT — GIFT_species_lookup","text":"genus character string defining genus name looked . epithet character string defining specific epithet looked . namesmatched Boolean. FALSE default, set TRUE want  look species standardized species names also  original species names came original resources. api character string defining API data retrieved. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_species_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Species list in GIFT — GIFT_species_lookup","text":"data frame 24 columns.","code":""},{"path":"/reference/GIFT_species_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Species list in GIFT — GIFT_species_lookup","text":"column refers : 'orig_ID' - Identification number species taxonomic harmonization 'orig_genus' - Identification number genus taxonomic harmonization 'name_ID' - Genus name taxonomic harmonization 'cf_genus'-  'genus'- Genus taxonomic harmonization 'cf_species'-  'aff_species'- 'species_epithet'- Epithet species taxonomic harmonization 'subtaxon'- Subtaxon species taxonomic harmonization 'author'- Author described species (taxonomic harmonization) 'matched'- species matched taxonomic backbone 'epithetscore'- Matching score epithet 'overallscore'- Overall matching score species 'resolved'- species name resolved taxonomic backbone 'synonym'- species name synonym taxonomic backbone 'matched_subtaxon'- subtaxon matched taxonomic backbone 'accepted'- species name accepted taxonomic backbone 'service'- Service use taxonomic harmonization 'work_ID'- Identification number species taxonomic harmonization 'taxon_ID'- Identification number taxonomic group 'work_genus'- Identification number genus taxonomic harmonization 'work_species_epithet'- Identification number species epithet taxonomic harmonization 'work_species'- Species name (taxonomic harmonization) 'work_author'-  Author described species (taxonomic harmonization)","code":""},{"path":"/reference/GIFT_species_lookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Species list in GIFT — GIFT_species_lookup","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_species_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species list in GIFT — GIFT_species_lookup","text":"","code":"if (FALSE) { ex <- GIFT_species_lookup(genus = \"Fagus\", epithet = \"sylvatica\") }"},{"path":"/reference/GIFT_taxgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT taxgroup — GIFT_taxgroup","title":"GIFT taxgroup — GIFT_taxgroup","text":"Assign taxonomic groups various hierarchical level species GIFT  (work_ID)","code":""},{"path":"/reference/GIFT_taxgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT taxgroup — GIFT_taxgroup","text":"","code":"GIFT_taxgroup(   work_ID = NULL,   taxon_lvl = c(\"family\", \"order\", \"higher_lvl\")[1],   return_ID = FALSE,   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\",   taxonomy = NULL,   species = NULL )"},{"path":"/reference/GIFT_taxgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT taxgroup — GIFT_taxgroup","text":"work_ID vector defining IDs species retrieve taxonomic groups . `Null` default. taxon_lvl taxonomic level retrieve names . \"family\" default. Check `GIFT_taxonomy()` available levels. addition available levels one can put \"higher_lvl\" retrieve higher level groups \"Anthocerotophyta\", \"Marchantiophyta\", \"Bryophyta\", \"Lycopodiophyta\", \"Monilophyta\", \"Gymnospermae\", \"Angiospermae\". return_ID logical indicating whether give back taxon_IDs instead names. GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved. taxonomy option supply taxonomy object loaded already  avoid double loading. internal use within GIFT functions. `NULL`  (default) taxonomy loaded within function. species option supply species names object loaded already avoid double loading. internal use within GIFT functions. `NULL`  (default) species loaded within function.","code":""},{"path":"/reference/GIFT_taxgroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT taxgroup — GIFT_taxgroup","text":"vector taxonomic group species used input.","code":""},{"path":"/reference/GIFT_taxgroup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT taxgroup — GIFT_taxgroup","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_taxgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT taxgroup — GIFT_taxgroup","text":"","code":"if (FALSE) { ex <- GIFT_taxgroup(work_ID = c(1:5), taxon_lvl = \"family\") ex2 <- GIFT_taxgroup(work_ID = c(1:5), taxon_lvl = \"higher_lvl\") }"},{"path":"/reference/GIFT_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy of GIFT — GIFT_taxonomy","title":"Taxonomy of GIFT — GIFT_taxonomy","text":"Retrieves taxonomy GIFT.","code":""},{"path":"/reference/GIFT_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomy of GIFT — GIFT_taxonomy","text":"","code":"GIFT_taxonomy(   GIFT_version = \"latest\",   api = \"http://gift.uni-goettingen.de/api/extended/\" )"},{"path":"/reference/GIFT_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomy of GIFT — GIFT_taxonomy","text":"GIFT_version character string defining version GIFT database use. function retrieves default --date version. api character string defining API data retrieved.","code":""},{"path":"/reference/GIFT_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomy of GIFT — GIFT_taxonomy","text":"data frame 6 columns.","code":""},{"path":"/reference/GIFT_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taxonomy of GIFT — GIFT_taxonomy","text":"Column taxon_ID indicates identification number taxonomic entry. names describing taxa column taxon_name. third column spells author name given taxon. column taxon_lvl splits every taxon genus, family, order superior orders. Taxonomy linear sequence left right borders taxon. nested, example left right borders genus fall left right borders corresponding family. Columns lft rgt respectively refer left right borders.","code":""},{"path":"/reference/GIFT_taxonomy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Taxonomy of GIFT — GIFT_taxonomy","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomy of GIFT — GIFT_taxonomy","text":"","code":"if (FALSE) { ex <- GIFT_taxonomy() }"},{"path":"/reference/GIFT_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT_traits — GIFT_traits","title":"GIFT_traits — GIFT_traits","text":"Retrieve specific trait values.","code":""},{"path":"/reference/GIFT_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT_traits — GIFT_traits","text":"","code":"GIFT_traits(   trait_IDs = \"\",   agreement = 0.66,   bias_ref = TRUE,   bias_deriv = TRUE,   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT_traits — GIFT_traits","text":"trait_IDs character string indicating trait want retrieve. Traits must belong available list traits. agreement Percentage resources agree aggregated trait value, entries threshold omitted. bias_ref FALSE, exclude entries based resource potentially introduces bias (e.g. resource including trees). bias_deriv FALSE, exclude entries based derivation potentially introduces bias (e.g. phanerophytes woody life forms ambiguous). api Character string API. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT_traits — GIFT_traits","text":"long-format data frame 6 columns: `trait_ID`, `work_ID`, `species`, `trait_value`, `agreement` `references`.","code":""},{"path":"/reference/GIFT_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT_traits — GIFT_traits","text":"detail column: trait_ID - Identification number trait work_ID - Identification number taxonomically harmonized species species - Species name trait_value - Value trait agreement - Agreement score different sources trait value references - ref_ID got trait information","code":""},{"path":"/reference/GIFT_traits.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT_traits — GIFT_traits","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT_traits — GIFT_traits","text":"","code":"if (FALSE) { wood <- GIFT_traits(trait_IDs = c(\"1.1.1\", \"1.2.1\"), agreement = 0.66, bias_ref = FALSE, bias_deriv = FALSE) }"},{"path":"/reference/GIFT_traits_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT_traits_meta — GIFT_traits_meta","title":"GIFT_traits_meta — GIFT_traits_meta","text":"Retrieve metadata functional traits.","code":""},{"path":"/reference/GIFT_traits_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT_traits_meta — GIFT_traits_meta","text":"","code":"GIFT_traits_meta(   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_traits_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT_traits_meta — GIFT_traits_meta","text":"api Character string corresponding API. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_traits_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT_traits_meta — GIFT_traits_meta","text":"data frame 10 columns.","code":""},{"path":"/reference/GIFT_traits_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT_traits_meta — GIFT_traits_meta","text":"column refers : 'Lvl1' - First level trait classification. 'Category'- Name first level classification. 'Lvl2'- Second level trait classification. 'Trait1'- ame second level classification. 'Lvl3' - Identification number trait. 'Trait2' - Trait name. 'Units' - Trait unit. 'type'- Trait type. 'comment'- Comment. 'count' - many entries traits database.","code":""},{"path":"/reference/GIFT_traits_meta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT_traits_meta — GIFT_traits_meta","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_traits_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT_traits_meta — GIFT_traits_meta","text":"","code":"if (FALSE) { ex <- GIFT_traits_meta() }"},{"path":"/reference/GIFT_traits_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"GIFT_traits_raw — GIFT_traits_raw","title":"GIFT_traits_raw — GIFT_traits_raw","text":"Retrieve non-aggregated trait values level bibliographic  references un-standardized species names GIFT.","code":""},{"path":"/reference/GIFT_traits_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIFT_traits_raw — GIFT_traits_raw","text":"","code":"GIFT_traits_raw(   trait_IDs = \"\",   derived = TRUE,   bias_ref = TRUE,   bias_deriv = TRUE,   api = \"http://gift.uni-goettingen.de/api/extended/\",   GIFT_version = \"latest\" )"},{"path":"/reference/GIFT_traits_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GIFT_traits_raw — GIFT_traits_raw","text":"trait_IDs character string indicating traits want retrieve. Traits must belong available list traits. See  GIFT_traits_meta() derived include logically derived traits. bias_ref FALSE, exclude entries based resource potentially introduces bias (e.g. resource including trees). bias_deriv FALSE, exclude entries based derivation potentially introduces bias (e.g. phanerophytes woody life forms ambiguous). api Character string API. GIFT_version character string defining version GIFT database use. function retrieves default --date version.","code":""},{"path":"/reference/GIFT_traits_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GIFT_traits_raw — GIFT_traits_raw","text":"data.frame 26 columns.","code":""},{"path":"/reference/GIFT_traits_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GIFT_traits_raw — GIFT_traits_raw","text":"detail column: trait_derived_ID - ref_ID - Identification number reference orig_ID - Identification number species, came source trait_ID - Identification number trait trait_value - Value trait derived - trait value derived another information (e.g. phanerophytes woody) bias_deriv - derivation potentially introducing bias name_ID - Identification number species resolved cf_genus - genus - Genus species cf_species - aff_species - species_epithet - Epithet species subtaxon - Sub-taxon name author - Author described species matched - species name matched taxonomic backbone epithetscore - Matching score epithet overallscore - Overall matching score resolved - species name resolved taxonomic backbone service - Taxonomic backbone used taxonomic harmonization work_ID - Identification number taxonomically harmonized species bias_ref - resource potentially introducing bias species - Species name geo_entity_ref - Name region reference ref_long - Full reference cite","code":""},{"path":"/reference/GIFT_traits_raw.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GIFT_traits_raw — GIFT_traits_raw","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_traits_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIFT_traits_raw — GIFT_traits_raw","text":"","code":"if (FALSE) { succulence_carnivory <- GIFT_traits_raw(trait_IDs = c(\"4.10.1\", \"4.16.1\")) }"},{"path":"/reference/GIFT_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Version of GIFT available — GIFT_version","title":"Version of GIFT available — GIFT_version","text":"Returns table information different versions database","code":""},{"path":"/reference/GIFT_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version of GIFT available — GIFT_version","text":"","code":"GIFT_version()"},{"path":"/reference/GIFT_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Version of GIFT available — GIFT_version","text":"data frame 4 columns.","code":""},{"path":"/reference/GIFT_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Version of GIFT available — GIFT_version","text":"column refers : 'ID' - Identification number version. 'version'- Version number. 'description'- major updates .","code":""},{"path":"/reference/GIFT_version.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Version of GIFT available — GIFT_version","text":"Weigelt, P, König, C, Kreft, H. GIFT – Global Inventory Floras      Traits macroecology biogeography. J Biogeogr. 2020; 47: 16– 43.      https://doi.org/10.1111/jbi.13623","code":""},{"path":[]},{"path":"/reference/GIFT_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Version of GIFT available — GIFT_version","text":"","code":"if (FALSE) { ex <- GIFT_version() }"},{"path":"/reference/med.html","id":null,"dir":"Reference","previous_headings":"","what":"Shape file of Mediterranean region — med","title":"Shape file of Mediterranean region — med","text":"Shape file encompassing Mediterranean sea. CRS WGS84.","code":""},{"path":"/reference/med.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shape file of Mediterranean region — med","text":"","code":"data(\"med\")"},{"path":"/reference/med.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Shape file of Mediterranean region — med","text":"object class \"cross\"; see read.cross.","code":""},{"path":"/reference/med.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shape file of Mediterranean region — med","text":"","code":"data(med)"},{"path":"/TODO.html","id":null,"dir":"","previous_headings":"","what":"GIFT","title":"GIFT","text":"list","code":""},{"path":"/TODO.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"GIFT","text":"Functions Vignette Database","code":""},{"path":"/TODO.html","id":"id_1-functions","dir":"","previous_headings":"","what":"1. Functions","title":"GIFT","text":"Final check 1. Checklists       1.1. GIFT_checklist_raw()      1.2. GIFT_checklist_conditional()      1.3. GIFT_spatial()      1.4. GIFT_taxonomy()      1.5. GIFT_taxgroup()      1.6. GIFT_no_overlap()      1.7. GIFT_checklist() Trait functions       2.1. GIFT_traits_meta()      2.2. GIFT_traits()      2.3. GIFT_traits_raw() Environment      3.1. GIFT_env()      3.2. GIFT_env_meta_misc()      3.3. GIFT_env_meta_raster() Species distribution      4.1. GIFT_species()      4.2. GIFT_ranges() Plotting functions      5.1. GIFT_shape()      5.2. GIFT_plot() Miscellaneous      6.1. med()      6.2. GIFT_references()      6.3. GIFT_geology()? generic queries?      GIFT_lists() => useless function removed? update GIFT_admin","code":""},{"path":"/TODO.html","id":"id_0-general","dir":"","previous_headings":"","what":"0. General","title":"GIFT","text":"api forwarded!!!~~","code":"- ~~all calls of GIFT functions inside of other functions need the version"},{"path":"/TODO.html","id":"id_1-details","dir":"","previous_headings":"","what":"1. Details","title":"GIFT","text":"1.1. GIFT_checklists_raw() 1.2. GIFT_checklists_conditional() leveling-(complete fern seed plant lists => complete Tracheophyta list): count unique genera available groups compare unique genera included desired group 1.3. GIFT_spatial() 1.4. GIFT_taxonomy() 1.5. GIFT_tax_group() 1.6. GIFT_no_overlap() Check: happens regions exist don’t spatial data? kept removed 1.7. GIFT_checklist() 2.1. GIFT_traits_meta() 2.2. GIFT_traits() make numeric traits numeric? Give back trait IDs valid? 2.3. GIFT_traits_raw() write help trait values character values (even numbers) make orig_names/names matched info optional? Add three new matching columns Give back trait IDs valid? 3.1. GIFT_env() remove rows NA variables control non-existing misc raster variables .numeric() entity_ID raster values delete duplicate geo_entity 3.2. GIFT_env_meta_misc() 3.3. GIFT_env_meta_raster() 4.1. GIFT_species() 4.2. GIFT_ranges() translate range_finder? 5.1. GIFT_shape() give back warning entity_IDs polygons? Put old polygons old versions respective folders 6.1. med() 6.2. GIFT_references(): GIFT_species_lookup() get rid orig ID faster? Make simple version least. (Patrick) GIFT_species_distribution() use simpler version GIFT_species() matchednames (Patrick) add conflict columns aggregated data GIFT_region() GIFT_overlap() GIFT_no_overlap() gives back entity IDs character. Change numeric make sure works downstream versions GIFT: restore old polygons versions < 2.2 (Patrick)","code":""},{"path":"/TODO.html","id":"id_12-controls","dir":"","previous_headings":"","what":"1.2. Controls","title":"GIFT","text":"Make clear error message case wrong API (clear error message version)","code":""},{"path":"/TODO.html","id":"id_2-vignette","dir":"","previous_headings":"","what":"2. Vignette","title":"GIFT","text":"","code":"- GIFT logo"},{"path":"/TODO.html","id":"id_4-queries","dir":"","previous_headings":"","what":"4. Queries","title":"GIFT","text":"Make dependency graph queries.php (WinSCP) => put comment R function queries used","code":""},{"path":"/TODO.html","id":"id_5-gift-admindatabase","dir":"","previous_headings":"","what":"5. GIFT admin/database","title":"GIFT","text":"Traits: aggregation categorical traits (agreement revise (ex. shrub herb/shrub NA far)) Traits: continuous traits: add column sd/var traits_final (put agreement column categorical traits far)","code":""},{"path":"/TODO.html","id":"id_6-extra-stuff","dir":"","previous_headings":"","what":"6. Extra-stuff","title":"GIFT","text":"tell bRacatus people use R package API?","code":""}]
